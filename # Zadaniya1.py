# Zadaniya1
# n=int(input('введите число'))
# result=n+n**2
# print(result) 
# number=46
# txt='46'
# z=txt*5
# print('значение number',number)
# print('значение txt',z)
# a=5
# b='f'
# c='привет'
# d=90.2
# e=67
# print(c)
# number=str(input('введите 4-ых зн число'))
# num=list(str(number))
# print(num)
# name={
#     'name':input('Введите имя'),
#     'surname':input('Введите фамилию'),
#     'age':input('vvedite age'),
#       }  
# print(name)
# a=int(input('введите число'))
# b=int(input('введите число'))
# c=int(input('введите число'))
# ab=a*5
# cb=b*5
# cc=c*5
# print(ab,cb,cc)
# number=6
# number_s=43
# number_st='4'
# result=number*float(number_st)*number_s
# print(result)
# a=int(input('введите число'))
# b=int(input('введите число'))
# c=int(input('введите число'))
# result=(a+b+c) 
# print(result)
# password=input('введите пароль')
# cerify_password=input('подтвердите пароль')
# def a_password(password,cerify_password):
#     if password==cerify_password:
#         print('пароль подтверждён')
#     else:
#         print('парль не подтверждён')
# a_password(password,cerify_password)

# a=int(input('Введите первое целое число'))
# b=int(input('Введите второе целое число'))
# operation=int(input('Введите операцию(+,-,/,*)'))
# if operation=='+':
#     result=a+b
# elif operation=='-':
#     result=a-b
# elif operation=='*':
#     result=a*b
# elif operation=='/':
#     result=a/b
# if b!=0:
#     result=a/b
# else:
#     print('НА ноль не делится')
# print(result)


# print('Hello world')

# Переменные - это именованные контейнеры для хранения данных в программировании. Вы можете присвоить переменной значение и 
# затем использовать это значение в своем коде. Например, в Python вы можете объявить переменную x и присвоить ей значение 
# 5, а затем использовать x в вашем коде для доступа к этому значению.
# Вы можете использовать оператор % для проверки четности числа. Если число делится на 2 без остатка, то оно четное, в 
# противном случае - нечетное. Например:

# number = 10

# if number % 2 == 0:
#     print("Четное число")
# else:
#     print("Нечетное число")
# Чтобы проверить, является ли число нечетным, вы можете заменить условие на if number % 2 != 0

# Цикл в программировании - это конструкция, которая позволяет выполнять один и тот же блок кода несколько раз. Это очень полезно, когда вам нужно выполнить однотипные действия с различными данными или повторить определенную операцию определенное количество раз.

# В Python есть два основных типа циклов: for и while.

# 1. Цикл for используется для перебора элементов в последовательности (например, списке, кортеже, строке и т.д.). Пример:

# for i in range(5):
#     print(i)
# Этот код выведет числа от 0 до 4.

# 2. Цикл while выполняется, пока заданное условие истинно. Пример:

# count = 0
# while count < 5:
#     print(count)
#     count += 1
# Этот код также выведет числа от 0 до 4, но с использованием цикла while.

# Оба типа циклов имеют свои применения, и выбор между ними зависит от конкретной задачи.
# Работа со списками в Python довольно проста и удобна. Список - это упорядоченная коллекция объектов, которая позволяет
#  хранить набор значений под одним именем. Вот некоторые основные операции:
#    my_list = [1, 2, 3, 4, 5]
# Доступ к элементам списка:
#    Вы можете получить доступ к элементам списка по их индексам. Индексы начинаются с 0.
  
#    print(my_list[0])  # Выводит первый элемент списка (1)
# Изменение элементов списка:
#    Элементы списка могут быть изменены.
  
#    my_list[0] = 10
# 4. Добавление элементов в список:
#    Можно добавить элемент в конец списка с помощью метода append() или вставить элемент на определенную позицию с помощью
# метода insert().
  
#    my_list.append(6)  # Добавляет элемент в конец списка
#    my_list.insert(2, 7)  # Вставляет элемент 7 на позицию 2
#    Удаление элементов из списка:
#    Можно удалить элемент из списка по значению или по индексу.
  
#    my_list.remove(3)  # Удаляет элемент со значением 3
#    del my_list[0]     # Удаляет первый элемент списка
# Длина списка:
#    Функция len() возвращает количество элементов в списке.
  
#    length = len(my_list)
   
# 7. Срезы списка:
#    Можно создать срез списка, указав начальный и конечный индексы.
  
#    sub_list = my_list[1:3]  # Создает подсписок, содержащий элементы с индексами от 1 до 2
   
# Это только базовые операции, доступные для работы со списками в Python. Списки также поддерживают множество других 
# методов и функций,
# которые могут быть полезны в различных ситуациях.
   

# Обработка исключений - это механизм в программировании, который позволяет программе корректно обрабатывать ошибки и 
# неожиданные ситуации во время выполнения. Это позволяет избежать аварийного завершения программы и предоставить
# пользователю информацию о возникшей проблеме. В различных языках программирования могут быть различные способы обработки
# исключений, но обычно это включает в себя блоки try-catch или try-except, где код, который может вызвать исключение,
#  помещается в блок try, а обработчик исключений определяется в блоке catch или except.
